<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/..\FrameXML\UI.xsd">
    <Button name="CompactUnitFrameAuraButtonTemplate" frameLevel="4" virtual="true">
        <Backdrop bgFile="Interface/Tooltips/UI-Tooltip-Background">
            <Color r="0.0" g="0.0" b="0.0" a="1.0" />
        </Backdrop>
        <Layers>
            <Layer level="OVERLAY">
                <Texture name="$parentTexture">
                    <Anchors>
                        <Anchor point="TOPLEFT" relativeTo="$parent">
                            <Offset x="1" y="-1" />
                        </Anchor>
                        <Anchor point="BOTTOMRIGHT" relativeTo="$parent">
                            <Offset x="-1" y="1" />
                        </Anchor>
                    </Anchors>
                    <TexCoords left="0.08" right="0.92" top="0.08" bottom="0.92" />
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnEnter>
                GameTooltip_SetDefaultAnchor(GameTooltip, UIParent)
                if this.type == 'buff' then
                    GameTooltip:SetUnitBuff(this:GetParent().unit, this.index)
                else
                    GameTooltip:SetUnitDebuff(this:GetParent().unit, this.index)
                end
                GameTooltip:Show()
            </OnEnter>
            <OnLeave>
                GameTooltip:Hide()
            </OnLeave>
            <OnMouseDown>
                if arg1 == 'LeftButton' then
                    TargetUnit(this:GetParent().unit)
                elseif arg1 == 'RightButton' then
                    local id = this:GetParent():GetID()
                    if id > 0 then
                        ToggleDropDownMenu(1, nil, getglobal('PartyMemberFrame' .. id .. 'DropDown'), this:GetName(), 100, 25)
                    end
                end
            </OnMouseDown>
        </Scripts>
    </Button>
    <Frame name="CompactUnitFrameTemplate" virtual="true">
        <Frames>
            <Button name="$parentHitbox">
                <Anchors>
                    <Anchor point="TOPLEFT" relativeTo="$parent" />
                    <Anchor point="BOTTOMRIGHT" relativeTo="$parent" />
                </Anchors>
                <Scripts>
                    <OnLoad>
                        this:RegisterForDrag('LeftButton')
                    </OnLoad>
                    <OnMouseDown>
                        if arg1 == 'LeftButton' then
                            TargetUnit(this:GetParent().unit)
                        elseif arg1 == 'RightButton' then
                            local id = this:GetParent():GetID()
                            if id > 0 then
                                ToggleDropDownMenu(1, nil, getglobal('PartyMemberFrame' .. id .. 'DropDown'), this:GetName(), 100, 25)
                            end
                        end
                    </OnMouseDown>
                    <OnEnter>
                        GameTooltip_SetDefaultAnchor(GameTooltip, UIParent)
                        GameTooltip:SetUnit(this:GetParent().unit)
                        GameTooltip:Show()
                    </OnEnter>
                    <OnLeave>
                        GameTooltip:Hide()
                    </OnLeave>
                    <OnDragStart>
                        if not UnitAffectingCombat('player') and IsControlKeyDown() then
                            CompactGroupFrame:StartMoving()
                        end
                    </OnDragStart>
                    <OnDragStop>
                        CompactGroupFrame:StopMovingOrSizing()
                    </OnDragStop>
                </Scripts>
            </Button>
            <StatusBar name="$parentHealthBar">
                <BarTexture file="Interface\TARGETINGFRAME\UI-StatusBar" />
                <BarColor r="0.0" g="1.0" b="0.0" />
                <Anchors>
                    <Anchor point="TOPLEFT" relativeTo="$parent" />
                </Anchors>
                <Backdrop bgFile="Interface/Tooltips/UI-Tooltip-Background">
                    <Color r="0.2" g="0.2" b="0.2" a="0.8" />
                </Backdrop>
                <Scripts>
                    <OnLoad>
                        this:SetFrameLevel(0)
                    </OnLoad>
                </Scripts>
                <Frames>
                    <StatusBar name="$parentIncomingHealBar" hidden="true">
                        <BarTexture file="Interface\TARGETINGFRAME\UI-StatusBar" />
                        <BarColor r="0.0" g="0.6" b="0.0" />
                        <Scripts>
                            <OnLoad>
                                this:SetFrameLevel(0)
                            </OnLoad>
                        </Scripts>
                    </StatusBar>
                </Frames>
            </StatusBar>
            <StatusBar name="$parentPowerBar" hidden="true">
                <Size x="0" y="4" />
                <BarTexture file="Interface\TARGETINGFRAME\UI-StatusBar" />
                <Anchors>
                    <Anchor point="BOTTOMLEFT" relativeTo="$parent" />
                </Anchors>
                <Backdrop bgFile="Interface/Tooltips/UI-Tooltip-Background" />
                <Scripts>
                    <OnLoad>
                        this:SetFrameLevel(0)
                    </OnLoad>
                </Scripts>
            </StatusBar>
            <Button name="$parentAuraButton1" inherits="CompactUnitFrameAuraButtonTemplate">
                <Anchors>
                    <Anchor point="BOTTOMLEFT" relativeTo="$parentHealthBar" />
                </Anchors>
            </Button>
            <Button name="$parentAuraButton2" inherits="CompactUnitFrameAuraButtonTemplate" />
            <Button name="$parentAuraButton3" inherits="CompactUnitFrameAuraButtonTemplate" />
            <Button name="$parentAuraButton4" inherits="CompactUnitFrameAuraButtonTemplate" />
            <Button name="$parentAuraButton5" inherits="CompactUnitFrameAuraButtonTemplate" />
            <Button name="$parentAuraButton6" inherits="CompactUnitFrameAuraButtonTemplate" />
            <Button name="$parentAuraButton7" inherits="CompactUnitFrameAuraButtonTemplate" />
            <Button name="$parentAuraButton8" inherits="CompactUnitFrameAuraButtonTemplate" />
        </Frames>
        <Layers>
            <Layer level="OVERLAY">
                <FontString name="$parentNameText" font="Fonts\FRIZQT__.TTF" justifyH="LEFT">
                    <Size x="60" y="10" />
                    <FontHeight val="10" />
                    <Anchors>
                        <Anchor point="TOPLEFT" relativeTo="$parent" />
                    </Anchors>
                </FontString>
                <Texture name="$parentCombatIndicator" file="Interface\CharacterFrame\UI-StateIcon">
                    <Size x="16" y="16" />
                    <Anchors>
                        <Anchor point="TOPLEFT" relativeTo="$parent">
                            <Offset x="2" y="0" />
                        </Anchor>
                    </Anchors>
                    <TexCoords left="0.5" right="1.0" top="0.0" bottom="0.5" />
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad>
                this.unit = nil

                this.interval = 1
                this.elapsed = 0

                this:RegisterEvent('UNIT_HEALTH')
                this:RegisterEvent('UNIT_MANA')
                this:RegisterEvent('UNIT_ENERGY')
                this:RegisterEvent('UNIT_RAGE')
                this:RegisterEvent('UNIT_AURA')
                this:RegisterEvent('UNIT_DISPLAYPOWER')
            </OnLoad>
            <OnEvent>
                local unit = arg1
                if unit and unit == this.unit then
                    if event == 'UNIT_AURA' then
                        CRF_UpdateMemberFrameAuras(this)
                    else
                        CRF_UpdateMemberFrame(this)
                    end
                end
            </OnEvent>
            <OnUpdate>
                this.elapsed = this.elapsed + arg1
                if this.elapsed >= this.interval then
		            this.elapsed = 0

                    if this.unit then
                        local indicator = getglobal(this:GetName() .. 'CombatIndicator')
                        if UnitAffectingCombat(this.unit) then
                            indicator:Show()
                            getglobal(this:GetName() .. 'NameText'):SetPoint('TOPLEFT', this, 16, -3)
                            getglobal(this:GetName() .. 'NameText'):SetWidth(this:GetWidth() - 16)
                        else
                            indicator:Hide()
                            getglobal(this:GetName() .. 'NameText'):SetPoint('TOPLEFT', this, 3, -3)
                            getglobal(this:GetName() .. 'NameText'):SetWidth(this:GetWidth() - 6)
                        end

                        if this.unit ~= 'player' and UnitIsConnected(this.unit) then
                            if not CheckInteractDistance(this.unit, 4) then
                                getglobal(this:GetName() .. 'HealthBar'):SetAlpha(0.5)
                                getglobal(this:GetName() .. 'PowerBar'):SetAlpha(0.5)
                            else
                                getglobal(this:GetName() .. 'HealthBar'):SetAlpha(1)
                                getglobal(this:GetName() .. 'PowerBar'):SetAlpha(1)
                            end
                        end
                    end
                end
            </OnUpdate>
        </Scripts>
    </Frame>
</Ui>